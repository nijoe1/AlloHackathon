"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/pool",{

/***/ "./utils/tableland.js":
/*!****************************!*\
  !*** ./utils/tableland.js ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAllActivePools: function() { return /* binding */ getAllActivePools; },\n/* harmony export */   getAllPoolsCreatedByProfile: function() { return /* binding */ getAllPoolsCreatedByProfile; },\n/* harmony export */   getAllPoolsRegisteredByProfile: function() { return /* binding */ getAllPoolsRegisteredByProfile; },\n/* harmony export */   getAllProfilesAdminHat: function() { return /* binding */ getAllProfilesAdminHat; },\n/* harmony export */   getPool: function() { return /* binding */ getPool; },\n/* harmony export */   getProfileDetails: function() { return /* binding */ getProfileDetails; },\n/* harmony export */   getProfilesData: function() { return /* binding */ getProfilesData; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n\nconst TablelandGateway = \"https://testnets.tableland.network/api/v1/query?statement=\";\nconst tables = {\n    pools: \"pools_421614_413\",\n    profilePools: \"profilePools_421614_412\",\n    profiles: \"profiles_421614_411\",\n    poolsReviews: \"pools_reviews_421614_414\",\n    poolsAllocations: \"pools_allocations_421614_415\",\n    poolsDistributions: \"pools_distributions_421614_416\"\n};\nconst getAllProfilesAdminHat = async ()=>{\n    const query = \"SELECT profileID, adminHat FROM \".concat(tables.profiles, \";\");\n    const fullUrl = \"\".concat(TablelandGateway).concat(encodeURIComponent(query));\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(fullUrl);\n        return response.data;\n    } catch (error) {\n        return null;\n    }\n};\nconst getAllPoolsCreatedByProfile = async (profileID)=>{\n    const query = \"SELECT \\n                    p.poolID,\\n                    json_object(\\n                        'strategy', p.strategy,\\n                        'votesPerAllocator', p.votesPerAllocator,\\n                        'threshold', p.threshold,\\n                        'ROP', p.ROP,\\n                        'RSTs', p.RSTs,\\n                        'RETs', p.RETs,\\n                        'ASTs', p.RETs,\\n                        'DistributionStartTime', p.DONET,\\n                        'AETs', p.AETs,\\n                        'PWDs', p.PWDs,\\n                        'PRDs', p.PRDs,\\n                        'totalVotesAllocated', (SELECT COALESCE(SUM(a.votesAmount), 0)\\n                                                FROM \".concat(tables.poolsAllocations, \" a\\n                                                WHERE a.poolID = p.poolID),\\n                        'poolMetadata', pp_pool.metadata,\\n                        'creatorName', creator_profile.name,\\n                        'creatorMetadata', creator_profile.metadata\\n                    ) AS poolDetails,\\n                    (\\n                        SELECT json_group_array(\\n                            json_object(\\n                                'recipientID', pp_recipient.profileID,\\n                                'recipientAddress', pp_recipient.profileAddress,\\n                                'metadata', pp_recipient.metadata,\\n                                'reviews', (SELECT GROUP_CONCAT(r.reviewInfo, ';')\\n                                            FROM (SELECT json_object(\\n                                                        'reviewRound', r.reviewRound,\\n                                                        'reviewedBy', r.reviewedBy,\\n                                                        'reviewedAt', r.reviewedAt,\\n                                                        'status', r.status) AS reviewInfo\\n                                                FROM \").concat(tables.poolsReviews, \" r\\n                                                WHERE r.recipientID = pp_recipient.profileID AND r.poolID = pp_recipient.poolID) r),\\n                                'allocations', (SELECT GROUP_CONCAT(a.allocationInfo, ';')\\n                                                FROM (SELECT json_object(\\n                                                            'allocationFrom', a.allocationFrom,\\n                                                            'votesAmount', a.votesAmount) AS allocationInfo\\n                                                    FROM \").concat(tables.poolsAllocations, \" a\\n                                                    WHERE a.recipientID = pp_recipient.profileID AND a.poolID = pp_recipient.poolID) a),\\n                                'distributions', (SELECT GROUP_CONCAT(d.distributionInfo, ';')\\n                                                FROM (SELECT json_object(\\n                                                            'distributionAmount', d.distributionAmount,\\n                                                            'streamID', d.streamID) AS distributionInfo\\n                                                        FROM \").concat(tables.poolsDistributions, \" AS d\\n                                                        WHERE d.recipientID = pp_recipient.profileID AND d.poolID = pp_recipient.poolID) d),\\n                                'totalVotesReceived', (SELECT COALESCE(SUM(a.votesAmount), 0)\\n                                                    FROM \").concat(tables.poolsAllocations, \" AS a\\n                                                    WHERE a.recipientID = pp_recipient.profileID),\\n                                'reviewStatusRoundOne', CASE \\n                                                        WHEN (SELECT COUNT(*) FROM \").concat(tables.poolsReviews, \" AS r\\n                                                            WHERE r.recipientID = pp_recipient.profileID AND r.poolID = pp_recipient.poolID AND r.reviewRound = '1' AND r.status = '2') >= p.threshold THEN 'Accepted'\\n                                                        WHEN (SELECT COUNT(*) FROM \").concat(tables.poolsReviews, \" AS r\\n                                                            WHERE r.recipientID = pp_recipient.profileID AND r.poolID = pp_recipient.poolID AND r.reviewRound = '1' AND r.status = '1') >= p.threshold THEN 'Rejected'\\n                                                        ELSE 'Pending' \\n                                                        END,\\n                                'isCanceledRoundTwo', CASE \\n                                                    WHEN (SELECT SUM(a.votesAmount) FROM \").concat(tables.poolsAllocations, \" AS a\\n                                                            WHERE a.recipientID = pp_recipient.profileID AND a.poolID = pp_recipient.poolID) < p.threshold THEN 'true'\\n                                                    ELSE 'false'\\n                                                    END\\n                            )\\n                        )\\n                        FROM \").concat(tables.profilePools, \" AS pp_recipient\\n                        WHERE pp_recipient.poolID = p.poolID AND pp_recipient.isCreator = 'false'\\n                    ) AS registeredRecipients,\\n\\n                    (\\n                        SELECT json_group_array(\\n                            json_object(\\n                                'allocatorID', a.allocationFrom,\\n                                'allocations', (SELECT json_group_array(\\n                                                    json_object(\\n                                                        'recipientID', a2.recipientID,\\n                                                        'votesAmount', a2.votesAmount\\n                                                    )\\n                                                )\\n                                                FROM \").concat(tables.poolsAllocations, \" AS a2\\n                                                WHERE a2.allocationFrom = a.allocationFrom AND a2.poolID = p.poolID),\\n                                'totalVotesAllocated', (SELECT COALESCE(SUM(a3.votesAmount), 0)\\n                                                        FROM \").concat(tables.poolsAllocations, \" AS a3\\n                                                        WHERE a3.allocationFrom = a.allocationFrom AND a3.poolID = p.poolID)\\n                            )\\n                        )\\n                        FROM \").concat(tables.poolsAllocations, \" AS a\\n                        WHERE a.poolID = p.poolID\\n                        GROUP BY a.allocationFrom\\n                    ) AS allocatorsInfo,\\n\\n                    (\\n                        SELECT json_group_array(\\n                            json_object(\\n                                'reviewerID', r.reviewedBy,\\n                                'reviews', (SELECT json_group_array(\\n                                                json_object(\\n                                                    'recipientID', r2.recipientID,\\n                                                    'reviewRound', r2.reviewRound,\\n                                                    'status', r2.status\\n                                                )\\n                                            )\\n                                            FROM \").concat(tables.poolsReviews, \" AS r2\\n                                            WHERE r2.reviewedBy = r.reviewedBy AND r2.poolID = p.poolID)\\n                            )\\n                        )\\n                        FROM \").concat(tables.poolsReviews, \" AS r\\n                        WHERE r.poolID = p.poolID\\n                        GROUP BY r.reviewedBy\\n                    ) AS reviewersInfo\\n                    FROM \\n                        \").concat(tables.profilePools, \" AS pp_pool\\n                    JOIN \\n                        \").concat(tables.pools, \" p ON pp_pool.poolID = p.poolID\\n                    JOIN \\n                        \").concat(tables.profiles, \" AS creator_profile ON pp_pool.profileID = creator_profile.profileID\\n                    WHERE \\n                    pp_pool.profileID = '\").concat(profileID, \"' AND pp_pool.isCreator = 'true'\\n                    GROUP BY \\n                    p.poolID\");\n    const fullUrl = \"\".concat(TablelandGateway).concat(encodeURIComponent(query));\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(fullUrl);\n        return response.data;\n    } catch (error) {\n        return null;\n    }\n};\nconst getAllPoolsRegisteredByProfile = async (profileID)=>{\n    const query = \"\\n    SELECT \\n    p.poolID,\\n    json_object(\\n        'strategy', p.strategy,\\n        'votesPerAllocator', p.votesPerAllocator,\\n        'threshold', p.threshold,\\n        'ROP', p.ROP,\\n        'RSTs', p.RSTs,\\n        'RETs', p.RETs,\\n        'ASTs', p.RETs,\\n        'DistributionStartTime', p.DONET,\\n        'AETs', p.AETs,\\n        'PWDs', p.PWDs,\\n        'PRDs', p.PRDs,\\n        'poolMetadata', profile.metadata,\\n        'creatorName', profile.name,\\n        'totalVotesAllocated', (SELECT COALESCE(SUM(a.votesAmount), 0)\\n                                FROM \".concat(tables.poolsAllocations, \" AS a\\n                                WHERE a.poolID = p.poolID),\\n        'reviewStatusRoundOne', CASE \\n                                WHEN (SELECT COUNT(*) FROM \").concat(tables.poolsReviews, \" AS r\\n                                        WHERE r.recipientID = pp_reg.profileID AND r.poolID = p.poolID AND r.reviewRound = '1' AND r.status = '2') >= p.threshold THEN 'Accepted'\\n                                WHEN (SELECT COUNT(*) FROM \").concat(tables.poolsReviews, \" AS r\\n                                        WHERE r.recipientID = pp_reg.profileID AND r.poolID = p.poolID AND r.reviewRound = '1' AND r.status = '1') >= p.threshold THEN 'Rejected'\\n                                ELSE 'Pending' \\n                                END,\\n        'isCanceledRoundTwo', (SELECT CASE \\n                                        WHEN SUM(a.votesAmount) < p.threshold THEN 'true'\\n                                        ELSE 'false'\\n                                    END\\n                                FROM \").concat(tables.poolsAllocations, \" AS a\\n                                WHERE a.recipientID = pp_reg.profileID AND a.poolID = p.poolID)\\n    ) AS poolDetails,\\n    (\\n        SELECT json_group_array(\\n            json_object(\\n                'reviewRound', r.reviewRound,\\n                'reviewedBy', r.reviewedBy,\\n                'reviewedAt', r.reviewedAt,\\n                'status', r.status,\\n                'recipientID', r.recipientID,\\n                'recipientAddress', r.recipientAddress\\n            )\\n        )\\n        FROM \").concat(tables.poolsReviews, \" AS r\\n        WHERE r.recipientID = pp_reg.profileID AND r.poolID = p.poolID\\n    ) AS reviews,\\n    (\\n        SELECT json_group_array(\\n            json_object(\\n                'allocationFrom', a.allocationFrom,\\n                'votesAmount', a.votesAmount,\\n                'recipientID', a.recipientID,\\n                'recipientAddress', a.recipientAddress\\n            )\\n        )\\n        FROM \").concat(tables.poolsAllocations, \" AS a\\n        WHERE a.recipientID = pp_reg.profileID AND a.poolID = p.poolID\\n    ) AS allocations,\\n    (\\n        SELECT json_group_array(\\n            json_object(\\n                'distributionAmount', d.distributionAmount,\\n                'streamID', d.streamID,\\n                'recipientID', d.recipientID,\\n                'recipientAddress', d.recipientAddress\\n            )\\n        )\\n        FROM \").concat(tables.poolsDistributions, \" AS d\\n        WHERE d.recipientID = pp_reg.profileID AND d.poolID = p.poolID\\n    ) AS distributions\\n    FROM \\n    \").concat(tables.pools, \" AS p\\n    JOIN \\n    \").concat(tables.profilePools, \" pp_reg ON p.poolID = pp_reg.poolID\\n    JOIN \\n    \").concat(tables.profiles, \" profile ON pp_reg.profileID = profile.profileID\\n    WHERE \\n    pp_reg.profileID = '\").concat(profileID, \"' AND pp_reg.isCreator = 'false'\\n    GROUP BY \\n    p.poolID;\\n    \");\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(TablelandGateway).concat(encodeURIComponent(query)));\n        return response.data;\n    } catch (error) {\n        return null;\n    }\n};\nconst getProfileDetails = async (profileID)=>{\n    const query = \"\\n    SELECT \\n      profile.metadata,\\n      profile.name\\n    FROM \\n      \".concat(tables.profiles, \" AS profile \\n    WHERE \\n      profile.profileID = '\").concat(profileID, \"'\");\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(TablelandGateway).concat(encodeURIComponent(query)));\n        return response.data;\n    } catch (error) {\n        console.error(\"Error fetching pools registered by profile:\", error);\n        return null;\n    }\n};\nconst getAllActivePools = async (time)=>{\n    const query = \"\\n        SELECT \\n           DISTINCT p.poolID,\\n            json_object(\\n                'strategy', p.strategy,\\n                'votesPerAllocator', p.votesPerAllocator,\\n                'threshold', p.threshold,\\n                'RoundOnePercentage', p.ROP,\\n                'RegistrationStartTime', p.RSTs,\\n                'RegistrationEndTime', p.RETs,\\n                'AllocationStartTime', p.RETs,\\n                'AllocationEndTime', p.AETs,\\n                'DistributionStartTime', p.DONET,\\n                'ProjectsWorkingDuration', p.PWDs,\\n                'ProjectsReviewDuration', p.PRDs,\\n                'PoolMetadata', pp_reg.metadata,\\n                'creatorName', profile.name,\\n                'creatorMetadata', profile.metadata,\\n                'creatorProfileID', profile.profileID\\n            ) AS poolDetails\\n        FROM \\n        \".concat(tables.pools, \" AS p\\n            JOIN \\n        \").concat(tables.profilePools, \" AS pp_reg ON p.poolID = pp_reg.poolID\\n            JOIN \\n        \").concat(tables.profiles, \" AS profile ON pp_reg.profileID = profile.profileID\\n            \\n        WHERE \\n            p.RETs >= '\").concat(time, \"' AND pp_reg.isCreator = 'true'\");\n    const fullUrl = \"\".concat(TablelandGateway).concat(encodeURIComponent(query));\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(fullUrl);\n        return response.data;\n    } catch (error) {\n        console.error(\"Error fetching active pools:\", error);\n        return null;\n    }\n};\nconst getProfilesData = async (profileIDs)=>{\n    let count = 0;\n    let whereClause = profileIDs.map((profileID, index)=>{\n        return \"\".concat(index === 0 ? \"\" : \" OR \", \"p.profileID = '\").concat(profileID, \"'\");\n    }).join(\"\");\n    const query = \"\\n        SELECT \\n            p.profileID,\\n            p.name,\\n            p.metadata AS ProfileMetadata,\\n            (SELECT COUNT(*) FROM \".concat(tables.profilePools, \" AS pp WHERE pp.profileID = p.profileID AND pp.isCreator = 'true') AS poolsCreated,\\n            (SELECT COUNT(*) FROM \").concat(tables.profilePools, \" AS pp WHERE pp.profileID = p.profileID AND pp.isCreator = 'false') AS poolsRegistered,\\n            (SELECT COALESCE(SUM(a.distributionAmount), 0) FROM \").concat(tables.poolsDistributions, \" AS a ) AS fundsDistributed,\\n            (SELECT COALESCE(SUM(d.distributionAmount), 0) FROM \").concat(tables.poolsDistributions, \" AS d WHERE d.recipientID = p.profileID) AS fundsReceived\\n        FROM \\n        \").concat(tables.profiles, \" AS p\\n        WHERE \\n        \").concat(\" \" + whereClause);\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(TablelandGateway).concat(encodeURIComponent(query)), {\n            params: profileIDs\n        });\n        return response.data;\n    } catch (error) {\n        console.error(\"Error fetching profile data:\", error);\n        return null;\n    }\n};\nconst getPool = async (poolID)=>{\n    const query = \"SELECT \\n                      DISTINCT p.poolID,\\n                      json_object(\\n                          'strategy', p.strategy,\\n                          'votesPerAllocator', p.votesPerAllocator,\\n                          'threshold', p.threshold,\\n                          'ROP', p.ROP,\\n                          'RSTs', p.RSTs,\\n                          'RETs', p.RETs,\\n                          'ASTs', p.RETs,\\n                          'DistributionStartTime', p.DONET,\\n                          'AETs', p.AETs,\\n                          'PWDs', p.PWDs,\\n                          'PRDs', p.PRDs,\\n                          'totalVotesAllocated', (SELECT COALESCE(SUM(a.votesAmount), 0)\\n                                                  FROM \".concat(tables.poolsAllocations, \" a\\n                                                  WHERE a.poolID = p.poolID),\\n                          'poolMetadata', pp_pool.metadata,\\n                          'creatorName', creator_profile.name,\\n                          'creatorMetadata', creator_profile.metadata\\n                      ) AS poolDetails,\\n                      (\\n                          SELECT json_group_array(\\n                              json_object(\\n                                  'recipientID', pp_recipient.profileID,\\n                                  'recipientAddress', pp_recipient.profileAddress,\\n                                  'metadata', pp_recipient.metadata,\\n                                  'reviews', (SELECT GROUP_CONCAT(r.reviewInfo, ';')\\n                                              FROM (SELECT json_object(\\n                                                          'reviewRound', r.reviewRound,\\n                                                          'reviewedBy', r.reviewedBy,\\n                                                          'reviewedAt', r.reviewedAt,\\n                                                          'status', r.status) AS reviewInfo\\n                                                  FROM \").concat(tables.poolsReviews, \" r\\n                                                  WHERE r.recipientID = pp_recipient.profileID AND r.poolID = pp_recipient.poolID) r),\\n                                  'allocations', (SELECT GROUP_CONCAT(a.allocationInfo, ';')\\n                                                  FROM (SELECT json_object(\\n                                                              'allocationFrom', a.allocationFrom,\\n                                                              'votesAmount', a.votesAmount) AS allocationInfo\\n                                                      FROM \").concat(tables.poolsAllocations, \" a\\n                                                      WHERE a.recipientID = pp_recipient.profileID AND a.poolID = pp_recipient.poolID) a),\\n                                  'distributions', (SELECT GROUP_CONCAT(d.distributionInfo, ';')\\n                                                  FROM (SELECT json_object(\\n                                                              'distributionAmount', d.distributionAmount,\\n                                                              'streamID', d.streamID) AS distributionInfo\\n                                                          FROM \").concat(tables.poolsDistributions, \" AS d\\n                                                          WHERE d.recipientID = pp_recipient.profileID AND d.poolID = pp_recipient.poolID) d),\\n                                  'totalVotesReceived', (SELECT COALESCE(SUM(a.votesAmount), 0)\\n                                                      FROM \").concat(tables.poolsAllocations, \" AS a\\n                                                      WHERE a.recipientID = pp_recipient.profileID),\\n                                  'reviewStatusRoundOne', CASE \\n                                                          WHEN (SELECT COUNT(*) FROM \").concat(tables.poolsReviews, \" AS r\\n                                                              WHERE r.recipientID = pp_recipient.profileID AND r.poolID = pp_recipient.poolID AND r.reviewRound = '1' AND r.status = '2') >= p.threshold THEN 'Accepted'\\n                                                          WHEN (SELECT COUNT(*) FROM \").concat(tables.poolsReviews, \" AS r\\n                                                              WHERE r.recipientID = pp_recipient.profileID AND r.poolID = pp_recipient.poolID AND r.reviewRound = '1' AND r.status = '1') >= p.threshold THEN 'Rejected'\\n                                                          ELSE 'Pending' \\n                                                          END,\\n                                  'isCanceledRoundTwo', CASE \\n                                                      WHEN (SELECT SUM(a.votesAmount) FROM \").concat(tables.poolsAllocations, \" AS a\\n                                                              WHERE a.recipientID = pp_recipient.profileID AND a.poolID = pp_recipient.poolID) < p.threshold THEN 'true'\\n                                                      ELSE 'false'\\n                                                      END\\n                              )\\n                          )\\n                          FROM \").concat(tables.profilePools, \" AS pp_recipient , \").concat(tables.profiles, \" AS p \\n                          WHERE pp_recipient.poolID = p.poolID AND pp_recipient.isCreator = 'false' AND pp_recipient.re = '\").concat(poolID, \"'\\n                      ) AS registeredRecipients,\\n  \\n                      (\\n                          SELECT json_group_array(\\n                              json_object(\\n                                  'allocatorID', a.allocationFrom,\\n                                  'allocations', (SELECT json_group_array(\\n                                                      json_object(\\n                                                          'recipientID', a2.recipientID,\\n                                                          'votesAmount', a2.votesAmount\\n                                                      )\\n                                                  )\\n                                                  FROM \").concat(tables.poolsAllocations, \" AS a2\\n                                                  WHERE a2.allocationFrom = a.allocationFrom AND a2.poolID = p.poolID),\\n                                  'totalVotesAllocated', (SELECT COALESCE(SUM(a3.votesAmount), 0)\\n                                                          FROM \").concat(tables.poolsAllocations, \" AS a3\\n                                                          WHERE a3.allocationFrom = a.allocationFrom AND a3.poolID = p.poolID)\\n                              )\\n                          )\\n                          FROM \").concat(tables.poolsAllocations, \" AS a\\n                          WHERE a.poolID = p.poolID\\n                          GROUP BY a.allocationFrom\\n                      ) AS allocatorsInfo,\\n  \\n                      (\\n                          SELECT json_group_array(\\n                              json_object(\\n                                  'reviewerID', r.reviewedBy,\\n                                  'reviews', (SELECT json_group_array(\\n                                                  json_object(\\n                                                      'recipientID', r2.recipientID,\\n                                                      'reviewRound', r2.reviewRound,\\n                                                      'status', r2.status\\n                                                  )\\n                                              )\\n                                              FROM \").concat(tables.poolsReviews, \" AS r2\\n                                              WHERE r2.reviewedBy = r.reviewedBy AND r2.poolID = p.poolID)\\n                              )\\n                          )\\n                          FROM \").concat(tables.poolsReviews, \" AS r\\n                          WHERE r.poolID = p.poolID\\n                          GROUP BY r.reviewedBy\\n                      ) AS reviewersInfo\\n                      FROM \\n                          \").concat(tables.profilePools, \" AS pp_pool\\n                      JOIN \\n                          \").concat(tables.pools, \" p ON pp_pool.poolID = p.poolID\\n                      JOIN \\n                          \").concat(tables.profiles, \" AS creator_profile ON pp_pool.profileID = creator_profile.profileID\\n                      WHERE \\n                      pp_pool.poolID = '\").concat(poolID, \"' AND pp_pool.poolID = p.poolID\");\n    const fullUrl = \"\".concat(TablelandGateway).concat(encodeURIComponent(query));\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(fullUrl);\n        return response.data;\n    } catch (error) {\n        console.error(\"Error fetching pools created by profile:\", error);\n        return null;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/tableland.js\n"));

/***/ })

});